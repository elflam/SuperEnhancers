setwd("~/Desktop/Super-Enhancers")

#import enhancer list and noodle doc, label columns of noodle doc
enhancer <- read.csv("testEnhancer.csv")

chr7 <- read.table("Noodles/noodles.chr7.txt", quote="", na.strings="", comment.char="",
                   stringsAsFactors=F, header=F,sep="\t",row.names=1)
noodleLabels <- read.table("noodleLabels.csv", header = F,sep=",",
                           quote="", na.strings="", comment.char="", stringsAsFactors=F,
                           nrows=1,row.names=1)
colnames(chr7) <- noodleLabels

#find noodles overlapping with enhancer
noodleOverlap <- chr7[which(chr7$end >= enhancer$start & chr7$start <= enhancer$end), ]

#create plot with both normal & tumor meth ratios
x <- cbind(noodleOverlap$start, noodleOverlap$start)
y <- cbind(noodleOverlap$nor.ratio, noodleOverlap$tmr.ratio)
matplot(x,y, type="l")
legend('topleft',pch='-',col=c('red','black'),legend=c('T','N'))

#find indices of hotspot (max nor.ratio) and determine which samples have 5 or fewer reads
hotspot <- which(max(noodleOverlap$nor.ratio)==noodleOverlap$nor.ratio)
hotspotSamp <- names(which(apply(noodleOverlap[hotspot,grep('700.reads',colnames(chr7))] <= 5,2,all)))
DNAsamp <- names(which(apply(noodleOverlap[hotspot,sub('.700.reads','',hotspotSamp)] == 0,2,all)))

#import clinical data and RNA expression (log)
RNAExp <- read.table("HPVOPRSEMData_091615_log.csv", header = T, sep=",", quote="",
                     na.strings="", comment.char="", stringsAsFactors=F)
clinical <- read.table("clinicaldata.csv", header = T,
                       sep=",", quote="", na.strings="", comment.char="", stringsAsFactors=F)

#Expand enhancers by 1Mbp on each side
expStart <- enhancer$end - 1000000
expEnd <- enhancer$start + 1000000

#find noodles overlapping extended enhancer & get list of closest genes
extendedOverlap <- chr7[which(chr7$end >= expStart & chr7$start <= expEnd), ]
geneList <- unique(extendedOverlap$closest.TSS)
positions <- unique(extendedOverlap$pos)

#get expression data for closest genes from RNAExp file
#Genes that are not listed in RNAExp are filtered out
geneExp <- RNAExp[0,]
geneNames <- sapply(strsplit(RNAExp$genes, split="\\|"), function(x){x[[1]]})
rownames(RNAExp) <- geneNames
RNAExp2 <- RNAExp[,-1]
screenedGenes <- intersect(geneList, geneNames)
geneExp <- RNAExp2[screenedGenes, ]

#match DNA sample #s to RNA sample #
RNAsamp <- clinical[which(clinical$Tumor.Tissue.DNA.HAND.ID %in% DNAsamp), ]
RNAsamp <- RNAsamp$Tumor.Tissue.RNA.HAND.ID

#separate normal and tumor samples (gene expression data)
Nsamp <- geneExp[ ,grep('N',colnames(geneExp))]
Tsamp <- geneExp[ ,grep('T',colnames(geneExp))]
Xsamp <- geneExp[ ,grep('X', colnames(geneExp))]
Csamp <- geneExp[ ,grep('C',colnames(geneExp))]

#change colnames to only display sample HandID
colnames(Nsamp) <- c(sapply(strsplit(colnames(Nsamp), split="\\."), function(x){x[[2]]}))
colnames(Tsamp) <- c(sapply(strsplit(colnames(Tsamp), split="\\."), function(x){x[[2]]}))
colnames(Xsamp) <- c(sapply(strsplit(colnames(Xsamp), split="\\."), function(x){x[[2]]}))
colnames(Csamp) <- c(sapply(strsplit(colnames(Csamp), split="\\."), function(x){x[[2]]}))

#separate U & M samples
NUsamp <- Nsamp[ ,which(colnames(Nsamp) %in% RNAsamp)]
NMsamp <- Nsamp[ ,(which(!(colnames(Nsamp) %in% RNAsamp)))]
TUsamp <- Tsamp[ ,which(colnames(Tsamp) %in% RNAsamp)]
TMsamp <- Tsamp[ ,(which(!(colnames(Tsamp) %in% RNAsamp)))]
XUsamp <- Xsamp[ ,which(colnames(Xsamp) %in% RNAsamp)]
XMsamp <- Xsamp[ ,(which(!(colnames(Xsamp) %in% RNAsamp)))]
CUsamp <- Csamp[ ,which(colnames(Csamp) %in% RNAsamp)]
CMsamp <- Csamp[ ,(which(!(colnames(Csamp) %in% RNAsamp)))]

#create vector of samples with class type
classVec <- c(names(NUsamp), names(NMsamp), names(TUsamp), names(TMsamp), names(XUsamp),
              names(XMsamp), names(CUsamp), names(CMsamp))
names(classVec) <- classVec
classVec[names(NUsamp)] <- "NU"
classVec[names(NMsamp)] <- "NM"
classVec[names(TUsamp)] <- "TU"
classVec[names(TMsamp)] <- "TM"
classVec[names(XUsamp)] <- "XU"
classVec[names(XMsamp)] <- "XM"
classVec[names(CUsamp)] <- "CU"
classVec[names(CMsamp)] <- "CM"

#Create color vector for classVec
classCols <- classVec
classCols[names(NUsamp)] <- "blue"
classCols[names(NMsamp)] <- "cyan"
classCols[names(TUsamp)] <- "darkorchid"
classCols[names(TMsamp)] <- "darkolivegreen1"
classCols[names(XUsamp)] <- "aquamarine"
classCols[names(XMsamp)] <- "coral"
classCols[names(CUsamp)] <- "blanchedalmond"
classCols[names(CMsamp)] <- "cornflowerblue"

#create matrix for heatmap
expmat <- function(x, y){
  df <- merge(x, y, by= "row.names", all.x= F, all.y= F)
  rownames(df) <- df$Row.names
  df$Row.names <- NULL
  return(df)
}
expMatrix <- as.matrix(Reduce(expmat, list(NUsamp, NMsamp, TUsamp, TMsamp,
                      XUsamp, XMsamp, CUsamp, CMsamp)))

#create heatmap
install.packages( pkgs= "gplots" )
library(gplots)
heatmap.2(expMatrix, Colv=F, trace="none", col=redgreen, ColSideColors = classCols)
legend('right',pch='-',col=c('blue','cyan', 'darkorchid', 'darkolivegreen1',
        'aquamarine', 'coral', 'blanchedalmond', 'cornflowerblue'),
       legend=c('NU','NM', 'TU','TM', 'XU', 'XM', 'CU', 'CM'))

#create table with genes, distance to enhancer
geneTable <- data.frame(Genes = c(geneList), position = c(positions)) 
