setwd("~/Desktop/Super-Enhancers")

#import enhancer list and noodle doc, label columns of noodle doc
enhancer <- read.csv("testEnhancer2.csv")

chr7 <- read.table("Noodles/noodles.chr7.txt", quote="", na.strings="", comment.char="",
                   stringsAsFactors=F, header=F,sep="\t",row.names=1)
 noodleLabels <- read.table("noodleLabels.csv", header = F,sep=",",
                           quote="", na.strings="", comment.char="", stringsAsFactors=F,
                           nrows=1,row.names=1)
colnames(chr7) <- noodleLabels

#import clinical data and RNA expression (log)
RNAExp <- read.table("HPVOPRSEMData_091615_log.csv", header = T, sep=",", quote="",
                     na.strings="", comment.char="", stringsAsFactors=F)
clinical <- read.table("clinicaldata.csv", header = T,
                       sep=",", quote="", na.strings="", comment.char="", stringsAsFactors=F)

#Begin loop and open blank pdf
pdf("enhancer.pdf")
for (i in 1:nrow(enhancer)){

#find noodles overlapping with enhancer
  noodleOverlap <- chr7[which(chr7$end >= enhancer[i,]$start & chr7$start <= enhancer[i,]$end), ]
  
  #find indices of hotspot (max nor.ratio) and determine which samples have 5 or fewer reads
  hotspot <- which(max(noodleOverlap$nor.ratio)==noodleOverlap$nor.ratio)
  hotspotSamp <- names(which(apply(noodleOverlap[hotspot,grep('700.reads',colnames(chr7))] <= 5,2,all)))
  if (length(hotspotSamp) == 0){
    next
  }  
  DNAsamp <- names(which(apply(noodleOverlap[hotspot,sub('.700.reads','',hotspotSamp)] == 0,2,all)))
  
#create label for pdf 
  label <- paste(as.character(enhancer[i,]$chr), ":", enhancer[i,]$start, "-", enhancer[i,]$end)
  textplot(label)
  
#create plot with both normal & tumor meth ratios (hotspot)
  x <- cbind(noodleOverlap$start, noodleOverlap$start)
  y <- cbind(noodleOverlap$nor.ratio, noodleOverlap$tmr.ratio)
  matplot(x,y, type="l")
  legend('topleft',pch='-',col=c('red','black'),legend=c('T','N'))

#match DNA sample #s to RNA sample #
  RNAsamp <- clinical[which(clinical$Tumor.Tissue.DNA.HAND.ID %in% DNAsamp), ]
  RNAsamp <- RNAsamp$Tumor.Tissue.RNA.HAND.ID

#Expand enhancers by 1Mbp on each side
  expStart <- enhancer[i,]$end - 1000000
  expEnd <- enhancer[i,]$start + 1000000

#find noodles overlapping extended enhancer & get list of closest genes
  extendedOverlap <- chr7[which(chr7$end >= expStart & chr7$start <= expEnd), ]
  geneList <- unique(extendedOverlap$closest.TSS)
  positions <- unique(extendedOverlap$pos)

#get expression data for closest genes from RNAExp file
#Genes that are not listed in RNAExp are filtered out
  geneExp <- RNAExp[0,]
  geneNames <- sapply(strsplit(RNAExp$genes, split="\\|"), function(x){x[[1]]})
  rownames(RNAExp) <- geneNames
  RNAExp2 <- RNAExp[,-1]
  screenedGenes <- intersect(geneList, geneNames)
  geneExp <- RNAExp2[screenedGenes, ]

#separate normal and tumor samples (gene expression data)
  Nsamp <- geneExp[ ,grep('N',colnames(geneExp))]
  Tsamp <- geneExp[ ,grep('T',colnames(geneExp))]
  Xsamp <- geneExp[ ,grep('X', colnames(geneExp))]
  Csamp <- geneExp[ ,grep('C',colnames(geneExp))]

#change colnames to only display sample HandID
  colnames(Nsamp) <- c(sapply(strsplit(colnames(Nsamp), split="\\."), function(x){x[[2]]}))
  colnames(Tsamp) <- c(sapply(strsplit(colnames(Tsamp), split="\\."), function(x){x[[2]]}))
  colnames(Xsamp) <- c(sapply(strsplit(colnames(Xsamp), split="\\."), function(x){x[[2]]}))
  colnames(Csamp) <- c(sapply(strsplit(colnames(Csamp), split="\\."), function(x){x[[2]]}))

#separate U & M samples, ensure that all are matrices 
  NUsamp <- as.matrix(Nsamp[ ,which(colnames(Nsamp) %in% RNAsamp)])
  rownames(NUsamp) <- rownames(Nsamp)
  colnames(NUsamp) <- colnames(Nsamp[colnames(Nsamp) %in% RNAsamp])

  NMsamp <- as.matrix(Nsamp[ ,which(!(colnames(Nsamp) %in% RNAsamp))])
  rownames(NMsamp) <- rownames(Nsamp)
  colnames(NMsamp) <- colnames(Nsamp[!(colnames(Nsamp) %in% RNAsamp)])

  TUsamp <- as.matrix(Tsamp[ ,which(colnames(Tsamp) %in% RNAsamp)])
  rownames(TUsamp) <- rownames(Tsamp)
  colnames(TUsamp) <- colnames(Tsamp[colnames(Tsamp) %in% RNAsamp])

  TMsamp <- as.matrix(Tsamp[ ,which(!(colnames(Tsamp) %in% RNAsamp))])
  rownames(TMsamp) <- rownames(Tsamp)
  colnames(TMsamp) <- colnames(Tsamp[!(colnames(Tsamp) %in% RNAsamp)])

  XUsamp <- as.matrix(Xsamp[ ,which(colnames(Xsamp) %in% RNAsamp)])
  rownames(XUsamp) <- rownames(Xsamp)
  colnames(XUsamp) <- colnames(Xsamp[colnames(Xsamp) %in% RNAsamp])

  XMsamp <- as.matrix(Xsamp[ ,(which(!(colnames(Xsamp) %in% RNAsamp)))])
  rownames(XMsamp) <- rownames(Xsamp)
  colnames(XMsamp) <- colnames(Xsamp[!(colnames(Xsamp) %in% RNAsamp)])

  CUsamp <- as.matrix(Csamp[ ,which(colnames(Csamp) %in% RNAsamp)])
  rownames(CUsamp) <- rownames(Csamp)
  colnames(CUsamp) <- colnames(Csamp[colnames(Csamp) %in% RNAsamp])

  CMsamp <- as.matrix(Csamp[ ,(which(!(colnames(Csamp) %in% RNAsamp)))])
  rownames(CMsamp) <- rownames(Csamp)
  colnames(CMsamp) <- colnames(Csamp[!(colnames(Csamp) %in% RNAsamp)])

#create vector of samples with class type
  classVec <- c(colnames(NUsamp), colnames(NMsamp), colnames(TUsamp), colnames(TMsamp), colnames(XUsamp),
              colnames(XMsamp), colnames(CUsamp), colnames(CMsamp))
  names(classVec) <- classVec
  classVec[colnames(NUsamp)] <- "NU"
  classVec[colnames(NMsamp)] <- "NM"
  classVec[colnames(TUsamp)] <- "TU"
  classVec[colnames(TMsamp)] <- "TM"
  classVec[colnames(XUsamp)] <- "XU"
  classVec[colnames(XMsamp)] <- "XM"
  classVec[colnames(CUsamp)] <- "CU"
  classVec[colnames(CMsamp)] <- "CM"

#Create color vector for classVec
  classCols <- classVec
  classCols[colnames(NUsamp)] <- "blue"
  classCols[colnames(NMsamp)] <- "cyan"
  classCols[colnames(TUsamp)] <- "darkorchid"
  classCols[colnames(TMsamp)] <- "darkolivegreen1"
  classCols[colnames(XUsamp)] <- "aquamarine"
  classCols[colnames(XMsamp)] <- "coral"
  classCols[colnames(CUsamp)] <- "blanchedalmond"
  classCols[colnames(CMsamp)] <- "cornflowerblue"

##Differential methylation between TU and TM samples
  library("edgeR")
  library(limma)
  library('ClassDiscovery')
  library('simpleaffy')

  TUTM <- merge(TUsamp, TMsamp, by="row.names", sort=F)
  rownames(TUTM) <- TUTM$Row.names
  TUTM$Row.names <- NULL
  colnames(TUTM)[colnames(TUTM)%in%colnames(TUsamp)] <- paste("U", colnames(TUTM[ ,colnames(TUsamp)]), sep = "_")
  colnames(TUTM)[colnames(TUTM)%in%colnames(TMsamp)] <- paste("M", colnames(TUTM[ ,colnames(TMsamp)]), sep = "_")
  TUTM <- as.matrix(TUTM)

  pheno <- factor(substr(colnames(TUTM),1,1),levels=c('U','M'))
  names(pheno) <- colnames(TUTM)
  mm <- model.matrix(~pheno)

  TUTM <- TUTM[apply(log2(TUTM+1),1,max) - apply(log2(TUTM+1),1,min)>0.5,]

#filter distances > 1Mbp
  positions2 <- unique(extendedOverlap$pos[extendedOverlap$closest.TSS %in% row.names(TUTM)])
  names(positions2) <- row.names(TUTM)
  distance <- sapply(positions2, function(x) x-enhancer[i,]$start)
  names(distance) <- row.names(TUTM)
  for (i in names(distance)){
    if (distance[i] < -1000000){
      TUTM <- TUTM[-(which(rownames(TUTM) == i)),] 
      positions2 <- positions2[-(which(names(positions2)==i))]
      distance <- distance[-(which(names(distance)==i))]
    }
    else if (distance[i] > 1000000){
      TUTM <- TUTM[-(which(rownames(TUTM) == i)),]
      positions2 <- positions2[-(which(names(positions2)==i))]
      distance <- distance[-(which(names(distance)==i))]
    }
  }

#continue differential methylation
  TUTM_DGE <- DGEList(counts=TUTM)
  TUTM_DGE <- calcNormFactors(TUTM_DGE)
  TUTM_VOOM <- voom(TUTM_DGE, mm)
  TUTM.fit <- eBayes(lmFit(TUTM_VOOM,mm))

  DEgenes <- row.names(topTable(TUTM.fit,coef="phenoM",p.value = 0.05, number=Inf,lfc=1))

#create matrix for heatmap
  expmat <- function(x, y){
    df <- merge(x, y, by= "row.names", all.x= F, all.y= F, sort=F)
    rownames(df) <- df$Row.names
    df$Row.names <- NULL
    return(df)
  }
  expMatrix <- Reduce(expmat, list(NUsamp, NMsamp, TUsamp, TMsamp, XUsamp, XMsamp, CUsamp, CMsamp))
  expMatrix <- as.matrix(expMatrix[row.names(expMatrix)%in%row.names(TUTM),])

#sort matrix by p-value
  pvals <- TUTM.fit$p.value[,2]
  sortedExpMatrix <- expMatrix[names(sort(pvals)),]

#create heatmap
  library(gplots)
  heatmap.2(sortedExpMatrix, Colv=F, Rowv=F, trace="none", scale='row',
          col=redgreen, ColSideColors = classCols,
          hclust=function(x) hclust(x,method="complete"),
          distfun=function(x) as.dist((1-cor(t(x)))/2))

#create table with genes, distance to enhancer, TU vs TM p-values
  DE <- row.names(TUTM)
  names(DE) <- row.names(TUTM)
  DE[] <- c("no")
  DE[DEgenes] <- "yes"
  geneTable <- data.frame(position = positions2, distance=distance,
                         p.value = TUTM.fit$p.value[,2], DE = DE)
  geneTable <- geneTable[order(geneTable$p.value),]
  textplot(geneTable)
}

dev.off()
 
