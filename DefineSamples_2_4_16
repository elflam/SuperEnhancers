#### support functions 
expmat <- function(x, y){
  df <- merge(x, y, by= "row.names", all.x= F, all.y= F, sort=F)
  rownames(df) <- df$Row.names
  df$Row.names <- NULL
  return(df)
}

### code
setwd("~/Desktop/Super-Enhancers/Code Skeleton")

#import enhancer list and noodle docs, label columns of noodle docs
enhancer<- read.csv("test files/testEnhancer2.csv")
for (i in 1:nrow(enhancer)){
  rownames(enhancer)[i] <- paste(as.character(enhancer[i,]$chr), ":", enhancer[i,]$start, "-", enhancer[i,]$end, sep="")
}

#import enhancer list and noodle docs, label columns of noodle docs
for (i in 1:22) {
  load(paste("Noodles/chr",i,sep=""))
}

noodleLabels <- read.table("Noodles/noodleLabels.csv", header = F,sep=",",
                           quote="", na.strings="", comment.char="", stringsAsFactors=F,
                           nrows=1,row.names=1)

#import clinical data and RNA expression (log)
#prepare RNAExp for analysis  
RNAExp <- read.table("Enhancer Data/HPVOPRSEMData_091615_log.csv", header = T, sep=",", quote="",
                     na.strings="", comment.char="", stringsAsFactors=F)
geneNames <- sapply(strsplit(RNAExp$genes, split="\\|"), function(x){x[[1]]})
rownames(RNAExp) <- geneNames
RNAExp2 <- RNAExp[,-1]

clinical <- read.table("Enhancer Data/clinicaldata.csv", header = T,
                       sep=",", quote="", na.strings="", comment.char="", stringsAsFactors=F)

j=1
matrixList <- list()

#begin loop #1
for (i in 1:nrow(enhancer)){
  
  #filter out chrX
  if (as.character(enhancer[i,]$chr) == "chrX"){
    next
  }
  
  #filter out enhancers where ratio.tmr >= ratio.normal 
  if (enhancer[i,]$tmr.ratio > enhancer[i,]$nor.ratio){
    next
  }
  
  #find noodles overlapping with enhancer
  CHR<-get(as.character(enhancer[i,]$chr))
  colnames(CHR) <- noodleLabels
  noodleOverlap <- CHR[which(CHR$end >= enhancer[i,]$start & CHR$start <= enhancer[i,]$end), ]   
  
  #find indices of hotspot (max nor.ratio) and determine which samples have 5 or fewer reads
  hotspot <- which((noodleOverlap$nor.ratio - noodleOverlap$tmr.ratio) == max(noodleOverlap$nor.ratio - noodleOverlap$tmr.ratio))
  hotspotSamp <- names(which(apply(noodleOverlap[hotspot,grep('700.reads',noodleLabels)] <= 5,2,all)))
  if (length(hotspotSamp) < 10){
    next
  }  
  DNAsamp <- names(which(apply(noodleOverlap[hotspot,sub('.700.reads','',hotspotSamp)] == 0,2,all)))
  
  #match DNA sample #s to RNA sample #
  RNAsamp <- clinical[which(clinical$Tumor.Tissue.DNA.HAND.ID %in% DNAsamp), ]
  RNAsamp <- RNAsamp$Tumor.Tissue.RNA.HAND.ID
  
  #Expand enhancers by 1Mbp on each side
  expStart <- enhancer[i,]$end - 1000000
  expEnd <- enhancer[i,]$start + 1000000
  
  #find noodles overlapping extended enhancer & get list of closest genes
  extendedOverlap <- CHR[which(CHR$end >= expStart & CHR$start <= expEnd), ]
  geneList <- unique(extendedOverlap$closest.TSS)
  positions <- unique(extendedOverlap$pos)
  
  #get expression data for closest genes from RNAExp file
  #Genes that are not listed in RNAExp are filtered out
  geneExp <- RNAExp2[0,]
  screenedGenes <- intersect(geneList, geneNames)
  geneExp <- RNAExp2[screenedGenes, ]
  
  #separate normal and tumor samples (gene expression data)
  Nsamp <- geneExp[ ,grep('N',colnames(geneExp))]
  Tsamp <- geneExp[ ,grep('T',colnames(geneExp))]
  Xsamp <- geneExp[ ,grep('X', colnames(geneExp))]
  Csamp <- geneExp[ ,grep('C',colnames(geneExp))]
  
  #change colnames to only display sample HandID
  colnames(Nsamp) <- c(sapply(strsplit(colnames(Nsamp), split="\\."), function(x){x[[2]]}))
  colnames(Tsamp) <- c(sapply(strsplit(colnames(Tsamp), split="\\."), function(x){x[[2]]}))
  colnames(Xsamp) <- c(sapply(strsplit(colnames(Xsamp), split="\\."), function(x){x[[2]]}))
  colnames(Csamp) <- c(sapply(strsplit(colnames(Csamp), split="\\."), function(x){x[[2]]}))
  
  #separate U & M samples, ensure that all are matrices 
  NUsamp <- as.matrix(Nsamp[ ,which(colnames(Nsamp) %in% RNAsamp), drop=FALSE])
  NMsamp <- as.matrix(Nsamp[ ,which(!(colnames(Nsamp) %in% RNAsamp)),drop=FALSE])
  TUsamp <- as.matrix(Tsamp[ ,which(colnames(Tsamp) %in% RNAsamp),drop=FALSE])
  TMsamp <- as.matrix(Tsamp[ ,which(!(colnames(Tsamp) %in% RNAsamp)), drop=FALSE])
  XUsamp <- as.matrix(Xsamp[ ,which(colnames(Xsamp) %in% RNAsamp), drop=FALSE])
  XMsamp <- as.matrix(Xsamp[ ,(which(!(colnames(Xsamp) %in% RNAsamp))),drop=FALSE])
  CUsamp <- as.matrix(Csamp[ ,which(colnames(Csamp) %in% RNAsamp), drop=FALSE])
  CMsamp <- as.matrix(Csamp[ ,(which(!(colnames(Csamp) %in% RNAsamp))),drop=FALSE])
  
  #create vector of samples with class type
  classVec <- c(colnames(NUsamp), colnames(NMsamp), colnames(TUsamp), colnames(TMsamp), colnames(XUsamp),
                colnames(XMsamp), colnames(CUsamp), colnames(CMsamp))
  names(classVec) <- classVec
  classVec[colnames(NUsamp)] <- "NU"
  classVec[colnames(NMsamp)] <- "NM"
  classVec[colnames(TUsamp)] <- "TU"
  classVec[colnames(TMsamp)] <- "TM"
  classVec[colnames(XUsamp)] <- "XU"
  classVec[colnames(XMsamp)] <- "XM"
  classVec[colnames(CUsamp)] <- "CU"
  classVec[colnames(CMsamp)] <- "CM"
  
  classVec <- factor(classVec, levels=c('NU','NM','TU','TM','XU','XM','CU','CM'))
  
  #Create matrix  
  DEMatrix <- Reduce(expmat, list(NUsamp, NMsamp, TUsamp, TMsamp))
  DEMatrix <- as.matrix(DEMatrix[row.names(DEMatrix)%in%row.names(geneExp),])
  
  colnames(DEMatrix)[colnames(DEMatrix)%in%colnames(TUsamp)] <- paste("TU", colnames(DEMatrix[ ,colnames(TUsamp)]), sep = "_")
  colnames(DEMatrix)[colnames(DEMatrix)%in%colnames(TMsamp)] <- paste("TM", colnames(DEMatrix[ ,colnames(TMsamp)]), sep = "_")
  colnames(DEMatrix)[colnames(DEMatrix)%in%colnames(NUsamp)] <- paste("NU", colnames(DEMatrix[ ,colnames(NUsamp)]), sep = "_")
  colnames(DEMatrix)[colnames(DEMatrix)%in%colnames(NMsamp)] <- paste("NM", colnames(DEMatrix[ ,colnames(NMsamp)]), sep = "_")
  
  DEMatrix <- DEMatrix[apply(log2(DEMatrix+1),1,max) - apply(log2(DEMatrix+1),1,min)>0.5, ,drop=FALSE]
  
  #filter distances > 1Mbp
  positions2 <- unique(extendedOverlap$pos[extendedOverlap$closest.TSS %in% row.names(DEMatrix)])
  names(positions2) <- row.names(DEMatrix)
  distance <- sapply(positions2, function(x) x-enhancer[i,]$start)
  names(distance) <- row.names(DEMatrix)
  for (i in names(distance)){
    if (distance[i] < -1000000){
      DEMatrix <- DEMatrix[-(which(rownames(DEMatrix) == i)), ,drop=FALSE] 
      positions2 <- positions2[-(which(names(positions2)==i))]
      distance <- distance[-(which(names(distance)==i))]
    }
    else if (distance[i] > 1000000){
      DEMatrix <- DEMatrix[-(which(rownames(DEMatrix) == i)), ,drop=FALSE]
      positions2 <- positions2[-(which(names(positions2)==i))]
      distance <- distance[-(which(names(distance)==i))]
    }
  }
  
  matrixList[[j]] <- DEMatrix
  j <- j + 1
  
}
  

save("matrixList", "classVec", file = "DefineSamples.Rda")
  
