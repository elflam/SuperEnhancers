#### support functions 
expmat <- function(x, y){
  df <- merge(x, y, by= "row.names", all.x= F, all.y= F, sort=F)
  rownames(df) <- df$Row.names
  df$Row.names <- NULL
  return(df)
  }

### code
setwd("~/Desktop/Super-Enhancers/TCGA Validation")

#import enhancer list and noodle docs, label columns of noodle docs
enhancer <- read.csv("~/Desktop/Super-Enhancers/TCGA validation/tmpEnhancerInput.csv", header=TRUE, stringsAsFactors = FALSE, na.strings="")
for (i in 1:nrow(enhancer)){
  rownames(enhancer)[i] <- paste(as.character(enhancer[i,]$chr), ":", enhancer[i,]$start, "-", enhancer[i,]$end, sep="")
}

setwd("~/Desktop/Super-Enhancers/Code Skeleton")

#Load noodles
#noodles.C.Rda contains methylation data
load("/Volumes/Seagate Backup Plus Drive/Noodles.C.Rda")
#huge.report.frame contains coordinate and closest TSS info
load("/Volumes/Seagate Backup Plus Drive/Noodles.huge.report.frame.Rda")

#assign report frame rownames to noodles.C
rownames(noodles.C.methylation) <- rownames(huge.report.frame)

#import methylation data
load("~/Dropbox/HNSCC_data_for_Emily/HNSC_methData.rda")

#import clinical data and RNA expression (log)
load("~/Dropbox/HNSCC_data_for_Emily/HNSC_RNAseqNormV2.rda")
RNAExp <- HNSC_RNAseqNormV2

#create RNA expression matrix with just samples with meth data
colnameOverlap <- colnames(RNAExp)[which(colnames(RNAExp) %in% colnames(HNSC_methData))]
RNAExp2 <- RNAExp[ ,colnameOverlap]

clinical <- read.table("Enhancer Data/clinicaldata.csv", header = T, sep=",", quote="", na.strings="", comment.char="", stringsAsFactors=F)

#import phenotype for TCGA samples 
pheno <- read.csv("~/Desktop/Super-Enhancers/TCGA validation/TCGA_pheno.csv", header = TRUE)

#Find common samples in meth, RNA, and pheno data
totalSamp <- intersect(colnames(HNSC_methData), colnames(RNAExp2))
totalSamp2 <- intersect(totalSamp, pheno$phenoBarcode)

#subset meth and RNA vectors to only have samples with all three data points (RNA, meth, pheno)
RNAExp3 <- RNAExp2[,totalSamp2]
methData <- HNSC_methData[,c(1,2,which(colnames(HNSC_methData) %in% totalSamp2))]

j=1
enhancerList <- list()

#begin loop #1
for (i in 1:nrow(enhancer)){
  k <- i
  
  #isolate chromosome number from enhancer dataframe
  chr <- sapply(strsplit(as.character(enhancer[i,]$chr), "r"), function(x){x[[2]]})
  
  #gather methylation data that overlaps enhancers
  #skip enhancers that have no methylation data
  methOverlap <- methData[which(as.character(methData[,1]) == chr & enhancer[i,]$end >= methData[,2] & enhancer[i,]$start <= methData[,2]), ,drop=FALSE]
  
  #Collect noodles (huge.report.frame and noodles.C.methylation) that overlap with enhancer
  noodleOverlap <- huge.report.frame[which(huge.report.frame$end >= enhancer[i,]$start & huge.report.frame$start <= enhancer[i,]$end & huge.report.frame$chr == enhancer[i,]$chr), ]
  
  noodleMethOverlap <- noodles.C.methylation[which(huge.report.frame$end >= enhancer[i,]$start & huge.report.frame$start <= enhancer[i,]$end & huge.report.frame$chr == enhancer[i,]$chr), ]
  
  #Expand enhancers by 1Mbp on each side
  expStart <- enhancer[i,]$end - 1000000
  expEnd <- enhancer[i,]$start + 1000000
  
  #find noodles overlapping extended enhancer & get list of closest genes
  #find noodles (huge.report.frame) overlapping extended enhancer & get list of closest genes and their genomic positions
  extendedOverlap <- huge.report.frame[which(huge.report.frame$end >= expStart & huge.report.frame$start <= expEnd & huge.report.frame$chr == enhancer[i,]$chr), ]
  geneList <- unique(extendedOverlap$closest.TSS)
  
  #get expression data for closest genes from RNAExp file
  #Genes that are not listed in RNAExp are filtered out
  screenedGenes <- intersect(geneList, rownames(RNAExp2))
  geneExp <- RNAExp2[screenedGenes, ]
  
  #Separate samples between normals and tumors, save vectors
  normalSamps <- as.character(pheno[which(pheno$subsite == "N"),1])
  tumorSamps <- as.character(pheno[which(pheno$subsite != "N"), 1])
  
  #filter out samples that aren't included in meth or RNA data
  normalSamps2 <- normalSamps[which(normalSamps %in% totalSamp2)]
  tumorSamps2 <- tumorSamps[which(tumorSamps %in% totalSamp2)]
  
  #separate normal and tumor samples (gene expression data)
  Nsamp <- geneExp[ ,which(colnames(geneExp) %in% normalSamps2)]
  Tsamp <- geneExp[ ,which(colnames(geneExp) %in% tumorSamps2)]
  
  #Now that N and T samples are split, calculate avg meth for each probe for all samples, T samples and N samples
  #set empty vectors
  avgMethVec <- numeric()
  TavgMethVec <- numeric()
  NavgMethVec <- numeric()
  #fill vectors and name items
  if(nrow(methOverlap) > 0){
    for (d in 1:nrow(methOverlap)){
      vecName <- rownames(methOverlap)[d]
      avgMethVec[d] <- mean(methOverlap[d,3:27])
      names(avgMethVec)[d] <- vecName
      TavgMethVec[d] <- mean(methOverlap[d,tumorSamps2])
      names(TavgMethVec)[d] <- vecName
      NavgMethVec[d] <- mean(methOverlap[d,normalSamps2])
      names(NavgMethVec)[d] <- vecName
    }
  }
  
  #create new Meth matrix with avg columns added
  methOverlap2 <- cbind(methOverlap[,1:2,drop=FALSE], avgMethVec, TavgMethVec, NavgMethVec, methOverlap[,3:27  ,drop=FALSE])
  methOverlap2 <- as.matrix(methOverlap2[order(methOverlap2[,2]),,drop=FALSE], drop=FALSE)
  
  #create vector of samples with class type
  classVec <- c(colnames(Nsamp), colnames(Tsamp))
  names(classVec) <- classVec
  classVec[colnames(Nsamp)] <- "N"
  classVec[colnames(Tsamp)] <- "T"
  
  #Create color vector for classVec
  classCols <- classVec
  classCols[colnames(Nsamp)] <- "blue"
  classCols[colnames(Tsamp)] <- "darkorchid"
  
  classVec <- factor(classVec, levels=c('N','T'))
  
  #Create matrix  
  DEMatrix <- Reduce(expmat, list(Nsamp, Tsamp))
  DEMatrix <- as.matrix(DEMatrix[row.names(DEMatrix)%in%row.names(geneExp),])
  
  #filter distances > 1Mbp
  positions <- extendedOverlap$pos[which(extendedOverlap$closest.TSS %in% row.names(DEMatrix))]
  names(positions) <- extendedOverlap$closest.TSS[which(extendedOverlap$closest.TSS %in% row.names(DEMatrix))]
  positions <- positions[unique(names(positions))]
  
  distance <- sapply(positions, function(x) x-enhancer[i,]$start) 
  names(distance) <- row.names(DEMatrix)
  for (i in names(distance)){
    if (distance[i] < -1000000){
      DEMatrix <- DEMatrix[-(which(rownames(DEMatrix) == i)), ,drop=FALSE] 
      positions <- positions[-(which(names(positions)==i))]
      distance <- distance[-(which(names(distance)==i))]
    }
    else if (distance[i] > 1000000){
      DEMatrix <- DEMatrix[-(which(rownames(DEMatrix) == i)), ,drop=FALSE]
      positions <- positions[-(which(names(positions)==i))]
      distance <- distance[-(which(names(distance)==i))]
    }
  }
  
  # add necessary items to jth element of enhancerList and name for enhancer 
  enhancerList[[j]] <- list(DEMatrix, classVec, as.character(enhancer[k,]$chr), enhancer[k,]$start, enhancer[k,]$end, methOverlap2, noodleOverlap, positions, distance, classCols)  
  j <- j + 1
  
}

setwd("~/Desktop/Super-Enhancers/TCGA Validation")
save("enhancerList","enhancer","RNAExp3","methData", file = "DefineSamplesTCGA2.Rda")
